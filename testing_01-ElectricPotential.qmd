```{ojs}
//| echo: false  
import {p5} from "@tmcw/p5";
math = require("mathjs");
Matter = require("matter-js");
```

```{ojs}
//| echo: false  
 

p5(sketch => {
let alto = 900;
let ancho = 900;
let margenX= ancho*0.025;
let margenY= alto*0.025;
let dx = 40;
let dy = 40;
let sep = 1.5;


let filas =  20;
let columnas = 20 ; 

let grillado;

// MATTER JS OBJECTS

var Engine = Matter.Engine,
 // Render = Matter.Render, // Uso la lib p5j
    World = Matter.World,
    Bodies = Matter.Bodies,
    Composite = Matter.Composite,
    Common = Matter.Common,
    Svg = Matter.Svg,
    Body = Matter.Body,
    Vertices = Matter.Vertices;
    
var engine;
var world;

let sliders;

let menu_secundario;





  
//***************************************************************************************
//*
//*              SETUP FUNCTINON
//*
//***************************************************************************************  
sketch.setup = function() {


//******************************
//* Setup Js5
//******************************
   
  sketch.createCanvas(ancho, alto);
  
  
//******************************
//* MENUS
//******************************
  menu_secundario = new Menu_secundario(sketch,ancho, alto, 3,1, margenX, margenY);
  menu_secundario.brick_bag_create();
    
  // Slider
	sliders = new Sliders(sketch,ancho*3/4+margenX*3,alto*1/5+margenY*4,'N Grilla');
  sliders.create();
  
//*******************************
// Grillado
//******************************

  grillado = new Grid_circles_v2(sketch,filas,columnas, ancho*(3/4), alto*(4/5), margenX, margenY);
  grillado.add_circles();

//******************************
// Engine
//******************************

  engine = Engine.create();
  engine.gravity.y = 0.7;

	world  = engine.world; 
 	Matter.Runner.run(engine); // Engine.run(engine)
  Engine.run(engine);
    
  
  };
  
//***************************************************************************************
//*
//*              DRAW FUNCTINON
//*
//***************************************************************************************

sketch.draw = function() {
  sketch.background('#292929');

  sliders.show();
  sliders.value();

// Menu 1 ********************

 	sketch.push();
	 	sketch.strokeWeight(4);
	 	//sketch.stroke(255, 174, 66);
	 	sketch.stroke('#ffffff');
	 	sketch.fill('#f5f5f5');
	  sketch.translate(margenX,margenY);
	 	sketch.rect(0,0,ancho*(3/4)-margenX, alto*(1/5)-margenY*2,5);
	 	sketch.circle(100 , 100, 10);
	sketch.pop();



// Menu 2 ********************

  menu_secundario.display();
  menu_secundario.brick_bag_draw(math);
  menu_secundario.mouseMoved(math);

// 	sketch.push();
//	 	sketch.strokeWeight(4);
//	 //	sketch.stroke(255, 174, 66);
//	  sketch.stroke('#ffffff');
//	 	sketch.fill('#f5f5f5');
//	  sketch.translate(ancho*3/4+margenX,alto*1/5);
//	 	sketch.rect(0,0,ancho*(1/4) - margenX*2, alto*(4/5) - margenY,5);
//	sketch.pop();





 //	sketch.push();
 	//  sketch.translate(margenX/2,alto*1/5);
  	grillado.run();
//  sketch.pop();
	
	grillado.mouseMoved(math); 	
	
  Engine.update(engine);
 
	        
	}

})

```



```{ojs}
//| echo: false 

//*****************************************************
//*
//* Menu Cargas
//*
//*****************************************************

class Menu_secundario{
  constructor(p5,ancho, alto, PosX, PosY, MargenX, MargenY){
    this.p5 = p5;
    this.ancho = ancho;
    this.alto  = alto;
    this.PosX = PosX/4;   // 3
    this.PosY = PosY/5;  // 1
    this.MargenX = MargenX;   // 3
    this.MargenY = MargenY;  // 1
    
    this.traslate_x = this.ancho*this.PosX+this.MargenX;
    this.traslate_y = this.alto*this.PosY;
    this.ancho_menu = this.ancho*(1-this.PosX) - this.MargenX*2;
    this.alto_menu  = this.alto*(1-this.PosY) - this.MargenY;
    
    this.stud_neg = [];
    this.stud_pos = [];
    this.stud_active = [];
  }
  
  display(){
    this.p5.push();
	   	this.p5.strokeWeight(4);
	    //	sketch.stroke(255, 174, 66);
	    this.p5.stroke('#ffffff');
	  	this.p5.fill('#f5f5f5');
	    this.p5.translate(this.traslate_x, this.traslate_y);
	 	  this.p5.rect(0,0,this.ancho_menu,this.alto_menu,5);
	  this.p5.pop();
  }
  
  brick_bag_create(){
    this.stud_neg.push(new Stud_v2(this.p5,this.traslate_x+this.ancho_menu/2, this.traslate_y+this.alto_menu/4, 30, 30, 1));
    console.log(this.stud_neg[0].value);
    
    this.stud_pos.push(new Stud_v2(this.p5,this.traslate_x+this.ancho_menu/2, this.traslate_y+this.alto_menu/2, 30, 30, 1));
    console.log(this.stud_pos[0].value);
  }
  
  
  brick_bag_draw(math){
  this.math = math;
    this.p5.push();
     // this.p5.translate(this.traslate_x, this.traslate_y);
      this.p5.text('Carga Negativa', this.traslate_x+this.ancho_menu/2-60, this.traslate_y+this.alto_menu/4-50);
      this.p5.fill('blue');
      this.stud_neg[0].run();
    this.p5.pop();
    
       this.p5.push();
     // this.p5.translate(this.traslate_x, this.traslate_y);
      this.p5.text('Carga Positiva', this.traslate_x+this.ancho_menu/2-60, this.traslate_y+this.alto_menu/4+120);
      this.p5.fill('red');
      this.stud_pos[0].run();
    this.p5.pop();
    
    //
  }
  
  
   mouseMoved(math){
      this.math = math;
      this.locX = this.p5.mouseX;
      this.locY = this.p5.mouseY;
      console.log(this.locX);
      console.log(this.stud_neg[0].posX);
      
      
      // Carga Negativa
      if(this.math.abs(this.locX - this.stud_neg[0].posX) < 30/2 & this.math.abs(this.locY - this.stud_neg[0].posY) < 30/2){
         			this.stud_neg[0].brilla(3);
         			 console.log('sIIII');
         			// if(mouse_click){
         			//    show_stud_charge();
         			      
         			     // if(mouse_un_click){
         			      //  add_stud_charge();
                    //  }
         			// }
         			 
     			}
     	if(this.math.abs(this.locX - this.stud_neg[0].posX) > 30/2 || this.math.abs(this.locY - this.stud_neg[0].posY) > 30/2){
         			this.stud_neg[0].brilla(0);
         		 console.log('NOOOO');
     			}
     			
     	// Carga Positiva
     	
     	if(this.math.abs(this.locX - this.stud_pos[0].posX) < 30/2 & this.math.abs(this.locY - this.stud_pos[0].posY) < 30/2){
         			this.stud_pos[0].brilla(3);
         			 console.log('sIIII');
     			}
     	if(this.math.abs(this.locX - this.stud_pos[0].posX) > 30/2 || this.math.abs(this.locY - this.stud_pos[0].posY) > 30/2){
         			this.stud_pos[0].brilla(0);
         		 console.log('NOOOO');
     			}		
   return false;
   }

  
}

```



```{ojs}
//| echo: false 

//****************************************
//*
//* SLIDER
//*
//***************************************

class Sliders {
constructor(p5,x,y,title){
	this.p5 = p5;
	this.pX = x;
	this.pY = y;
	this.title = title;
}

  create(){
	  this.sliders =  this.p5.createSlider(0, 100,100);
  }
	
	show(){
		this.sliders.position(this.pX, this.pY);
		this.p5.textSize(18);
	  this.p5.textFont('Helvetica');
		this.p5.text(this.title, this.pX, this.pY-10);
	}

	value(){
	// 	console.log(this.sliders.value());
	 	return(this.sliders.value()/5);

	}

	// this.expand_grid= function(){
	// 	let val =  this.value();
	// 	Nx=val;
	// 	Ny=val;
	// 	sliders.title = 'N Grilla: '+ (val-1)+' x '+ (val);

	// 	grid_lego = LEGO_grid();
	// }
}

```


```{ojs}

class stud_charged{
  constructo(){
  
  }
  
  
}

```






```{ojs}
//| echo: false  


//*********************************
//* Mueve el Mouse  
//* *******************************

class Stud_v2 {
constructor(p5, posX, posY, dx, dy, value) {
	this.posX  = posX ;
	this.posY  = posY;
	this.dx    = dx;
	this.dy    = dy;
	this.value = value;
	this.p5 = p5;
}

run() {
    this.display();
}

display() {

 //	this.p5.fill('#F9F9F9');
 	this.p5.stroke('#f7f7f7');
 	this.p5.square(this.posX-this.dx , this.posY-this.dy, this.dx*2);


  
  this.p5.push();
 	//  this.p5.translate(margenX/2,alto*1/5);

	this.p5.drawingContext.shadowOffsetX = 0;
  this.p5.drawingContext.shadowOffsetY = 4;
  this.p5.drawingContext.shadowBlur = 7;
  this.p5.drawingContext.shadowColor = '#DBDBDB';

		this.p5.stroke('#E8E8E8');
		this.p5.strokeWeight(this.value);
		this.p5.fill('DBDBDB');
		this.p5.circle(this.posX , this.posY, this.dx);
	this.p5.pop();

}

brilla(nivel){
  this.value = nivel;
}

isDead() {
    return 0;
  }

}



class Grid_circles_v2 {

   constructor(p5,filas,columnas,ancho, alto, margenX, margenY) {
  	
  	this.p5    = p5;
  	this.filas = filas,
  	this.columnas = columnas;
  	
  	this.sepX = ancho/this.filas;
  	this.sepY = alto/this.columnas;

  	this.margenX = margenX
  	this.margenY = margenY
  	
  	  
  	this.ancho = ancho- this.margenX;
  	this.alto  = alto - this.margenY;
  	
  	this.deltaX = this.p5.round(this.ancho/this.columnas);
  	this.deltaY = this.p5.round(this.alto/this.filas);
  
  	this.circles = [];
  	}
  
  
   add_circles() {
  	
  	for (let i = 0; i < this.columnas ; i= i+1) {
      	let CircleRow = [];
  			for ( let j = 0; j < this.filas ; j= j+1) {
  			  let posX =   this.deltaX*(i+1/2)  + this.margenX;
  			  let posY = this.deltaY*(j+1) + this.margenY+this.alto*(1/5);
  			  
  				CircleRow.push(new Stud_v2(this.p5,posX, posY, this.deltaX*0.55, this.deltaY*0.55, 1));
  			}
  		this.circles.push(CircleRow);
  	}
   }
  
  run() {
    for (let i = 0; i < this.circles.length; i++) {
  	    for (let j = 0; j < this.circles[i].length; j++){
  	  	  this.circles[i][j].run();
    	  }
  	}
  	  return 1;
    }
    
  nm2xy(i,j){
    i=i-1;
    j=j-1;
    return [this.circles[i][j].posX,this.circles[i][j].posY];
  }
  
  mouseMoved(math){
      this.math = math;
      this.locX = this.p5.mouseX;
      this.locY = this.p5.mouseY;
    
    for (let i = 0; i < this.circles.length; i++) {
      //  console.log(i);
       // console.log(this.locX);
      	for (let j = 0; j < this.circles[i].length; j++){
      //		m = this.circles[i][j];
    
         		if(this.math.abs(this.locX - this.circles[i][j].posX) < this.circles[i][j].dx/2 & 
         		   this.math.abs(this.locY - this.circles[i][j].posY) < this.circles[i][j].dy/2 
         		   ){
         			this.circles[i][j].brilla(2);
     			}
     			if(this.math.abs(this.locX - this.circles[i][j].posX) > this.circles[i][j].dx/2 ||
     			   this.math.abs(this.locY - this.circles[i][j].posY) > this.circles[i][j].dy/2 
     			   ){
         			this.circles[i][j].brilla(0);
     			}
     		}
    }
    return false;
    
}

}

```

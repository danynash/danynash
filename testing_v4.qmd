```{ojs}
//| echo: false  
import {p5} from "@tmcw/p5";
math = require("mathjs");
Matter = require("matter-js");
```

```{ojs}
//| echo: false  
 

p5(sketch => {
let alto = 700;
let ancho = 1000;
let dx =40;
let dy = 40;

let posGroundX=25;
let posGroundY=350;

let anchoBarra = 1000;
let altoBarra = 100;


let circulos;

var Engine = Matter.Engine,
 // Render = Matter.Render, // Uso la lib p5j
    World = Matter.World,
    Bodies = Matter.Bodies,
    Composite = Matter.Composite,
    Common = Matter.Common,
    Svg = Matter.Svg,
    Body = Matter.Body,
    Vertices = Matter.Vertices;
    
    // ENGINE
var engine;
var world;
var ground;
var circle;
  
  sketch.setup = function() {
    sketch.createCanvas(ancho, alto);
    
    
    
   // Engine
   	engine = Engine.create();

   //	engine.gravity.x=0;
   //engine.gravity.y=0.2;

	 world  = engine.world; 
 	Matter.Runner.run(engine); // Engine.run(engine)
	
	 ground = Matter.Bodies.rectangle(posGroundX, posGroundY, anchoBarra, altoBarra, { isStatic: true, angle: 0 });
	 circle = Matter.Bodies.circle(550, 0, 40, { isStatic: false });

    //  console.log(ground);
    Engine.run(engine);
    World.add(world,[ground, circle]);


    //system = new ParticleSystem(sketch, sketch.createVector(sketch.width/2, 50));
    circulos = new Grid_circles(sketch,799, 800, 80, 80);
    circulos.add_circles();
  };
  
  
  
  sketch.draw = function() {
  
    // Use degrees.
 // sketch.angleMode(DEGREES);
  
    sketch.background('lightgray');
  //  system.addParticle();
    //system.run();
    
	
	    	 //       console.log('sssssss');
	    		circulos.run();
	    		circulos.mouseMoved(sketch,math); 		
	    		
	    console.log("GROUND >>> (",sketch.round(ground.position.x,0),"," , sketch.round(ground.position.y,0),")");

	    	    console.log("CIRCULO >>> (",sketch.round(circle.position.x,0),"," ,sketch.round(circle.position.y,0),")");

	 //ground
 	
 //	console.log(ground.position.x);
 	sketch.push();
 	sketch.translate(ground.position.x,ground.position.y);
 	sketch.rotate(0);
 	sketch.fill(0,80,250,200);
  sketch.stroke(0,80,250,200);
   	sketch.rectMode(sketch.CENTER);
 	sketch.rect(0,0,anchoBarra,altoBarra);
 	sketch.pop();
 	
 	 //circle
 	 
 	sketch.push();
 	sketch.translate(circle.position.x,circle.position.y );
 	sketch.rectMode(sketch.CENTER);
 	sketch.fill(0,80,250,200);
  sketch.stroke(0,80,250,200);
 	sketch.circle(0,0,80);
 	sketch.pop();
 	
 //	console.log(circle.position.y);
 	
 	
  Engine.update(engine);
	        
	}

})

```

```{ojs}
//| echo: false  

class Stud {
constructor(p5, posX, posY, dx, dy, value) {
	this.posX  = posX;
	this.posY  = posY;
	this.dx    = dx;
	this.dy    = dy;
	this.value = value;
	this.p5 = p5;
}

run() {
    this.display();
}

display() {
				this.p5.stroke('black');
				this.p5.strokeWeight(this.value);
				this.p5.fill('white');
				this.p5.circle(this.posX, this.posY, this.dx/2);
}



brilla(nivel){
this.value = nivel;

}

isDead() {
    return 0;
  }

}



class Grid_circles {

 constructor(p5,ancho, alto, dx, dy) {
	this.ancho = 1200;
	this.alto  = 700;
	this.dx    = 60;
	this.dy    = 60;
	this.p5    = p5;
	this.circles = [];
 }


 add_circles() {

  for (let x = 0; x <=this.ancho; x = x + this.dx) {
    	let CircleRow = [];
			for ( let y = 0; y <=this.alto; y = y + this.dy) {
				CircleRow.push(new Stud(this.p5, x+this.dx/2, y+this.dx/2, this.dx, this.dy, 1));
			}
		this.circles.push(CircleRow);
	}
	//return circles;
 }

	
run() {

      for (let i = 0; i < this.circles.length; i++) {
    	    for (let j = 0; j < this.circles[i].length; j++){
    	  	  this.circles[i][j].run();
      	  }
    	}
    	return 1;
    
  }
  

mouseMoved(p5, math){
    this.math=math;
	  this.locX = this.p5.mouseX;
    this.locY = this.p5.mouseY;

	for (let i = 0; i < this.circles.length; i++) {
	  //  console.log(i);
	   // console.log(this.locX);
    	for (let j = 0; j < this.circles[i].length; j++){
    //		m = this.circles[i][j];

       		if(this.math.abs(this.locX - this.circles[i][j].posX) < this.circles[i][j].dx/4 & this.math.abs(this.locY - this.circles[i][j].posY) < this.circles[i][j].dy/4 ){
       			this.circles[i][j].brilla(2);
   			}
   			if(this.math.abs(this.locX - this.circles[i][j].posX) > this.circles[i][j].dx/4 || this.math.abs(this.locY - this.circles[i][j].posY) > this.circles[i][j].dy/4 ){
       			this.circles[i][j].brilla(0);
   			}
   		}
	}
	return false;

}
  

}








```

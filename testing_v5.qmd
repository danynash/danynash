```{ojs}
//| echo: false  
import {p5} from "@tmcw/p5";
math = require("mathjs");
Matter = require("matter-js");
```

```{ojs}
//| echo: false  
 

p5(sketch => {
let alto = 700;
let ancho = 1000;
let dx = 40;
let dy = 40;
let sep = 1.5;

let posGroundX=25;
let posGroundY=450;

let anchoBarra = 500;
let altoBarra = 100;


let circulos;

var Engine = Matter.Engine,
 // Render = Matter.Render, // Uso la lib p5j
    World = Matter.World,
    Bodies = Matter.Bodies,
    Composite = Matter.Composite,
    Common = Matter.Common,
    Svg = Matter.Svg,
    Body = Matter.Body,
    Vertices = Matter.Vertices;
    
    // ENGINE
var engine;
var world;
var ground;
var circle;

 let pos_ini_i = 7;
  let pos_ini_j = 2;


let filas =  10;
let columnas = 12 ; 

var galton_board_1;
var galton_board_2;
var galton_board_3;


var galton_board=[];
  
  sketch.setup = function() {
    sketch.createCanvas(ancho, alto);
    
     //system = new ParticleSystem(sketch, sketch.createVector(sketch.width/2, 50));
    //circulos = new Grid_circles(sketch,alto, ancho, dx, dy, sep);
    
    circulos = new Grid_circles_v2(sketch,filas,columnas, ancho, alto);
    circulos.add_circles();
    
    
   // console.log('Circulos::',circulos.circles[0][0].j);


  //  console.log('Circulos::',circulos.nm2xy(1,1)[0]);

   // Engine
   	engine = Engine.create();

   //	engine.gravity.x=0;
   engine.gravity.y = 0.9;

	 world  = engine.world; 
 	 Matter.Runner.run(engine); // Engine.run(engine)
	
	 ground = Matter.Bodies.rectangle(posGroundX, posGroundY, anchoBarra, altoBarra, { isStatic: true, angle: 0 });
	 circle = Matter.Bodies.circle(520, 0, 15, { isStatic: false, inertia: Infinity, friction: 0.01, restitution: 0.2, frictionAir: 0, frictionStatic: 0 });

	 
	 // GALTON BOARD
	 
	 	// galton_board_1 = Matter.Bodies.circle(390, 90, 20, { isStatic: true });
	 	// galton_board_2 = Matter.Bodies.circle(300, 150, 20, { isStatic: true });
	 	 //galton_board_3 = Matter.Bodies.circle(470, 150, 20, { isStatic: true });


     
     for(let lineas_num=0; lineas_num<5; lineas_num++){
          let y = 0;
         // let galton_board_temp=[];
        for(let dots_x = pos_ini_i-lineas_num; dots_x <= (pos_ini_i+lineas_num); dots_x++){
          let dots_y= pos_ini_j + lineas_num;
          galton_board.push(Matter.Bodies.circle(circulos.nm2xy(dots_x,dots_y)[0],circulos.nm2xy(dots_x,dots_y)[1],20,{isStatic: true }));
          y=y+1;
        }
        
       //   galton_board.push(galton_board_temp);
        
     }
     
    

	  // console.log(galton_board);
	 
	 var objects = galton_board.concat(ground);
     objects = objects.concat(circle);
	 
	 
	 // circle = Matter.Bodies.circle(550, 0, 40, { isStatic: false });
	


    //  console.log(ground);
    Engine.run(engine);
    
    
    
    //World.add(world,[ground, circle,galton_board_1,galton_board_2,galton_board_3]);
    World.add(world,objects );


   
  };
  
  
  
  sketch.draw = function() {
  
    // Use degrees.
 // sketch.angleMode(DEGREES);
  
    sketch.background('lightgray');
  //  system.addParticle();
    //system.run();
    
	
	    	 //       console.log('sssssss');
	    		circulos.run();
	    		circulos.mouseMoved(sketch,math); 	
	    		
	    		
	    		
	    		
	 //   console.log("GROUND >>> (",sketch.round(ground.position.x,0),"," , sketch.round(ground.position.y,0),")");

	   // 	    console.log("CIRCULO >>> (",sketch.round(circle.position.x,0),"," ,sketch.round(circle.position.y,0),")");

	 //ground
 	
 //	console.log(ground.position.x);
 	sketch.push();
 	sketch.translate(ground.position.x,ground.position.y);
 	sketch.rotate(0);
 	sketch.fill(0,80,250,200);
  sketch.stroke(0,80,250,200);
   	sketch.rectMode(sketch.CENTER);
 	sketch.rect(0,0,anchoBarra,altoBarra);
 	sketch.pop();
 	
 	 //circle
 	 
 	sketch.push();
 	sketch.translate(circle.position.x,circle.position.y );
 	sketch.rectMode(sketch.CENTER);
 	sketch.fill(0,80,250,200);
  sketch.stroke(0,80,250,200);
 	sketch.circle(0,0,30);
 	sketch.pop();
 	
 	
 	

 	//GALTON
 	
 
    

     for(let lineas_num=0; lineas_num<5; lineas_num++){
          let y=0;
        for(let dots_x = pos_ini_i-lineas_num; dots_x <= (pos_ini_i+lineas_num); dots_x++){
          let dots_y=pos_ini_j+lineas_num;
        //  galton_board[lineas_num][y] = Matter.Bodies.circle(circulos.nm2xy(dots_x,dots_y)[0],circulos.nm2xy(dots_x,dots_y)[1], 20,{ isStatic: true });
          
          sketch.push();
          sketch.translate(circulos.nm2xy(dots_x,dots_y)[0],circulos.nm2xy(dots_x,dots_y)[1] );
        	sketch.rectMode(sketch.CENTER);
          sketch.fill('orange');
          sketch.stroke(0,20,250,200);
 	        sketch.circle(0,0,30);
 	        sketch.pop();
    
          y=y+1;
          
        }
     }
 	
 	
 	 /*
 	sketch.push();
 	sketch.translate(galton_board_1.position.x,galton_board_1.position.y );
 	sketch.rectMode(sketch.CENTER);
 	sketch.fill('red');
  sketch.stroke(0,80,250,200);
 	sketch.circle(0,0,40);
 	sketch.pop();
 	
 	
 	sketch.push();
 	sketch.translate(galton_board_2.position.x,galton_board_2.position.y );
 	sketch.rectMode(sketch.CENTER);
 	sketch.fill('red');
  sketch.stroke(0,80,250,200);
 	sketch.circle(0,0,40);
 	sketch.pop();
 	
 	
 	sketch.push();
 	sketch.translate(galton_board_3.position.x,galton_board_3.position.y );
 	sketch.rectMode(sketch.CENTER);
 	sketch.fill('red');
  sketch.stroke(0,80,250,200);
 	sketch.circle(0,0,40);
 	sketch.pop();
 	*/
 	
 //	console.log(circle.position.y);
 	
 	
  Engine.update(engine);
	        
	}

})

```

```{ojs}
//| echo: false  

class Stud {
constructor(p5, posX, posY, dx, dy, value) {
	this.posX  = posX ;
	this.posY  = posY;
	this.dx    = dx;
	this.dy    = dy;
	this.value = value;
	this.p5 = p5;
}

run() {
    this.display();
}

display() {
				this.p5.stroke('black');
				this.p5.strokeWeight(this.value);
				this.p5.fill('white');
				this.p5.circle(this.posX , this.posY, this.dx);
}

brilla(nivel){
this.value = nivel;

}

isDead() {
    return 0;
  }

}



class Stud_v2 {
constructor(p5, posX, posY,i,j, dx, dy, value) {
	this.posX  = posX ;
	this.posY  = posY;
	this.i = i;
	this.j = j;
	this.dx    = dx;
	this.dy    = dy;
	this.value = value;
	this.p5 = p5;
}

run() {
    this.display();
}

display() {
				this.p5.stroke('black');
				this.p5.strokeWeight(this.value);
				this.p5.fill('white');
				this.p5.circle(this.posX , this.posY, this.dx);
}




brilla(nivel){
this.value = nivel;

}

isDead() {
    return 0;
  }

}



class Grid_circles_v2 {

 constructor(p5,filas,columnas,ancho, alto) {
	
	this.p5    = p5;
	this.filas = filas,
	this.columnas = columnas;
	
	this.sepX=ancho*0.05;
	this.sepY=alto*0.06;

	this.ancho = ancho- this.sepX*2;
	this.alto  = alto - this.sepY*2;
	
	this.deltaX = this.p5.round(this.ancho/this.columnas);
	this.deltaY = this.p5.round(this.alto/this.filas);
	


	this.circles = [];
	}


 add_circles() {
	
	for (let i = 0; i < this.columnas ; i= i+1) {
    	let CircleRow = [];
			for ( let j = 0; j < this.filas ; j= j+1) {
			  let posX = this.sepX + this.deltaX*i;
			  let posY = this.sepY + this.deltaY*j;
			  
		//	  	console.log('DeltaX', posX);
//	console.log('DeltaY', posY);
				CircleRow.push(new Stud_v2(this.p5,posX, posY,i+1,j+1, this.deltaX*0.45, this.deltaY*0.45, 1));
			}
		this.circles.push(CircleRow);
	}
	
	
	//return circles;
 }

	
run() {

      for (let i = 0; i < this.circles.length; i++) {
    	    for (let j = 0; j < this.circles[i].length; j++){
    	  	  this.circles[i][j].run();
      	  }
    	}
    	return 1;
    
  }
  
  
  nm2xy(i,j){
  i=i-1;
  j=j-1;
return [this.circles[i][j].posX,this.circles[i][j].posY];
}

  

mouseMoved(p5, math){
    this.math = math;
	  this.locX = this.p5.mouseX;
    this.locY = this.p5.mouseY;

	for (let i = 0; i < this.circles.length; i++) {
	  //  console.log(i);
	   // console.log(this.locX);
    	for (let j = 0; j < this.circles[i].length; j++){
    //		m = this.circles[i][j];

       		if(this.math.abs(this.locX - this.circles[i][j].posX) < this.circles[i][j].dx/2 & 
       		   this.math.abs(this.locY - this.circles[i][j].posY) < this.circles[i][j].dy/2 
       		   ){
       			this.circles[i][j].brilla(2);
   			}
   			if(this.math.abs(this.locX - this.circles[i][j].posX) > this.circles[i][j].dx/2 ||
   			   this.math.abs(this.locY - this.circles[i][j].posY) > this.circles[i][j].dy/2 
   			   ){
       			this.circles[i][j].brilla(0);
   			}
   		}
	}
	return false;

}
  

}











class Grid_circles {

 constructor(p5,ancho, alto, dx, dy, sep ) {
	
	this.p5    = p5;
	
	this.ancho = ancho;
	this.alto  = alto;
	
	this.deltaX = dx
	this.deltaY = dy
	
	
	
	
	
	this.dx    = dx;
	this.dy    = dy;
	
	this.sep   = sep; // =1 significa dx*1, =2 dignifica dx*2
	this.circles = [];
 }


 add_circles() {

  for (let y = this.dy+this.dy/4; y <= this.ancho-this.dy; y = y + this.dy*this.sep) {
    	let CircleRow = [];
			for ( let x = this.dx+this.dx/4; x <= this.alto - this.dx; x = x + this.dx*this.sep) {
				CircleRow.push(new Stud(this.p5, x, y, this.dy, this.dx, 1));
			}
		this.circles.push(CircleRow);
	}
	//return circles;
 }

	
run() {

      for (let i = 0; i < this.circles.length; i++) {
    	    for (let j = 0; j < this.circles[i].length; j++){
    	  	  this.circles[i][j].run();
      	  }
    	}
    	return 1;
    
  }
  

mouseMoved(p5, math){
    this.math = math;
	  this.locX = this.p5.mouseX;
    this.locY = this.p5.mouseY;

	for (let i = 0; i < this.circles.length; i++) {
	  //  console.log(i);
	   // console.log(this.locX);
    	for (let j = 0; j < this.circles[i].length; j++){
    //		m = this.circles[i][j];

       		if(this.math.abs(this.locX - this.circles[i][j].posX) < this.circles[i][j].dx/2 & 
       		   this.math.abs(this.locY - this.circles[i][j].posY) < this.circles[i][j].dy/2 
       		   ){
       			this.circles[i][j].brilla(2);
   			}
   			if(this.math.abs(this.locX - this.circles[i][j].posX) > this.circles[i][j].dx/2 ||
   			   this.math.abs(this.locY - this.circles[i][j].posY) > this.circles[i][j].dy/2 
   			   ){
       			this.circles[i][j].brilla(0);
   			}
   		}
	}
	return false;

}
  

}








```
